@page "/"
@using CBC.Server;
@using CBC.Shared;
@using Microsoft.AspNetCore.Components.Web
@using Newtonsoft.Json;

<PageTitle>Video Chat</PageTitle>

<div class="app-container">
    <div class="video-container">
        <div class="stranger-video-container">
            <video id="remoteVideo" autoplay playsinline></video>
            <div class="stranger-controls">

                <button @onclick="Skip" class="skip-button">Skip</button>
                <button @onclick="Report" class="report-button">Report</button>
                <div class="checkboxes-container">
                    <div>
                        <img src="images/male-icon.png" alt="Male" class="gender-icon" />
                        <input type="checkbox" @bind="acceptMale" />
                    </div>
                    <div>
                        <img src="images/female-icon.png" alt="Female" class="gender-icon" />
                        <input type="checkbox" @bind="acceptFemale" />
                    </div>
                </div>
                <div class="slider-container">
                    Age: @filters.MinAge - @filters.MaxAge
                    <br />
                    <RangeSlider Min="18" Max="60" ValueChanged="@((values) => OnSliderValueChanged(values))" />
                </div>
            </div>
        </div>
        <div class="local-video-container">
            <video id="localVideo" autoplay muted playsinline @ref="localVideo"></video>
            <canvas id="faceMeshCanvas" width="640" height="480"></canvas>
            <div class="chat-container">
                <textarea id="chatHistory" @bind="chatHistory" class="chat-history" readonly></textarea>
                <div class="send-container">
                    <textarea @bind="chatInput" class="chat-input" placeholder="Type your message..."></textarea>
                    <button @onclick="SendMessage" class="send-button">Send</button>
                </div>
            </div>
        </div>
    </div>
</div>
<p>@DetectionResult</p>

<style>
    html, body {
        height: 100%;
        margin: 0;
    }

    .app-container {
        display: flex;
        justify-content: center;
        align-items: stretch;
        height: 100%;
    }

    .video-container {
        display: flex;
        width: 100%;
        height: 100%;
    }

    .stranger-video-container, .local-video-container {
        display: flex;
        flex-direction: column;
        width: 50%;
        height: 100%;
    }

    video {
        width: 100%;
        height: 60vh;
        border: 1px solid #ccc;
    }


    .chat-container {
        display: flex;
        flex-direction: column;
        height: 100%;
        width: 100%;
    }

    .chat-history {
        flex-grow: 4;
        width: 100%;
        resize: none;
        margin-bottom: 10px;
        overflow-y: scroll;
    }

    .send-container {
        display: flex;
        gap: 10px;
    }

    .chat-input {
        flex-grow: 1;
        resize: none;
    }

    .skip-button, .report-button, .send-button {
        background-color: #007bff;
        border-color: #007bff;
        color: white;
        padding: 10px 20px;
        cursor: pointer;
    }

    select {
        width: 100%;
        height: 60%;
    }



    .stranger-controls {
        width: 100%;
        height: 20%;
        display: flex;
        flex-direction: row;
        align-items: center;
        gap: 10px;
    }

    .skip-button, .report-button, .checkboxes-container, .slider-container {
        flex-grow: 0;
        flex-shrink: 0;
        flex-basis: 25%;
        display: flex;
        justify-content: center;
        align-items: center;
        display: flex;
        flex-direction: column;
    }


    .noUi-horizontal {
        height: 8px;
        width: 60%; 
        block-size:auto;
    }

    .gender-icon {
        width: 24px;
        height: 24px;
        margin-right: 5px;
    }

    .checkboxes-container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

    .noUi-handle {
        width: 16px;
        height: 16px;
        border-radius: 50%;
        box-shadow: none;
        background: #3db9d3;
        cursor: pointer;
    }

    .checkboxes-container div {
        display: flex;
        align-items: center;
        margin-bottom: 5px;
    }

    </style>

@code {

    private static string? userConnectionId;
    private static string? targetConnectionId;
    private static bool isoffering;
    static bool reconnecting = false;

    private static string chatInput = "";
    static private string chatHistory = "";
    //private int ageMin = 0;
    //private int ageMax = 0;
    private bool acceptMale
    {
        get => filters.AcceptMale;
        set {
            changedFilters = true;
            filters.AcceptMale = value; 
        }
    }
    private bool acceptFemale
    {
        get => filters.AcceptFemale;
        set
        {
            changedFilters = true;
            filters.AcceptFemale = value;
        }
    }
    private ElementReference VideoElement;
    private ElementReference CanvasElement;
    static UserPreferences filters { get; set; } = new("");
    static bool changedFilters = false;
    private string? DetectionResult;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("enableLocalVideo", localVideo);
            await JSRuntime.InvokeVoidAsync("ff");  
            //await JSRuntime.InvokeVoidAsync("initializeFaceDetection");
        }
    }

    private async Task DetectFace()
    {
        Console.WriteLine(await JSRuntime.InvokeAsync<object>("ff"));
        DetectionResult = "No face detected.";
    }



    @using Microsoft.AspNetCore.SignalR.Client
    @inject NavigationManager NavigationManager

    @implements IDisposable
    private static HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/videoChatHub"), options =>
            {
                options.Url = new Uri(options.Url + "?Age=25&IsFemale=true");           //todo remove it wtf
            })
            .Build();
        //hubConnection.On<string>("ConnectToUser", async (newUserId) =>
        //{
        // TODO
        //});
        hubConnection.On<string>("ReceiveConnectionId", ReceiveConnectionId);
        hubConnection.On<string, bool>("MatchFound", MatchFound);
        hubConnection.On<string, SessionDescription>("ReceiveIceCandidate", async (senderUserId, candidate) =>
        {
            Console.WriteLine($"Received ICE candidate from ${ senderUserId}");
            // Handle the ICE candidate
            // ...
        });
        hubConnection.On<string, string>("ReceiveOffer", ReceiveOffer);
        hubConnection.On<string, string>("ReceiveOfferAndConnect", ReceiveOfferAndConnect);
        hubConnection.On<string>("CReceiveIceCandidate", CReceiveIceCandidate);
        await hubConnection.StartAsync();
    }

    protected override void OnInitialized()
    {
        js = JSRuntime;
    }


    public void Dispose()
    {
        if (hubConnection is not null)
        {
            hubConnection.DisposeAsync().GetAwaiter().GetResult();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

  

    private async Task Report()
    {
        string assemblyName = System.Reflection.Assembly.GetExecutingAssembly().GetName().Name;
        Console.WriteLine(assemblyName);
    }


    [Inject]
    static IJSRuntime jrt { get; set; }
    private static IJSObjectReference webrtcJs;

    private static IJSRuntime js { get; set; }

    private static async Task Skip()
    {
        Console.WriteLine($"{userConnectionId} Skipped");


        if (targetConnectionId != null)
        {
            await js.InvokeVoidAsync("sendChat", DisconnectCommandString);
        }
        targetConnectionId = null;
        await js.InvokeVoidAsync("closePeerConnection");
        Console.WriteLine($"{changedFilters} .... {filters}");
        if(changedFilters)
        {
            string filtersString = JsonConvert.SerializeObject(filters);
            await hubConnection.SendAsync("Skip", filtersString);
            changedFilters = false;
        }
        else
        {
            await hubConnection.SendAsync("Skip", "");
        }
        //Console.WriteLine($"{filtersString} string");

    }


    public async Task ReceiveConnectionId(string NewId)
    {
        userConnectionId = NewId;
        Console.WriteLine("MyId =  " + userConnectionId);
    }

    public async Task MatchFound(string connectTo, bool offering)
    {
        isoffering = offering;
        targetConnectionId = connectTo;
        try{
            await JSRuntime.InvokeVoidAsync("getLocalStream");
            await JSRuntime.InvokeVoidAsync("createPeerConnection");
        }catch (Exception e) { Console.WriteLine(e.Message + "bugged");}
        if (isoffering)
        {
            await SendOffer();
            //connectingState = ConnectingState.WaitingForAnswer;
        }
        else
        {
            //connectingState = ConnectingState.WaitingForOffer;
            await hubConnection.SendAsync("MarkAsRemoved");
        }
    }

    private static async Task SendOffer()
    {
        try
        {
            await js.InvokeVoidAsync("createOffer");
            var offer = await js.InvokeAsync<SessionDescription>("offerfn");
            string offerString = JsonConvert.SerializeObject(offer);
            Console.WriteLine("pocreateoffer  " + offerString);
            //var serializedOffer = JsonConvert.SerializeObject(offer);
            //Console.WriteLine(offer+"  tutut" );
            //offer = offer.Substring(1, offer.Length-2);
            //  Console.WriteLine($"Serialized is    {serializedOffer}");
            await hubConnection.SendAsync("ToPeer", targetConnectionId, offerString);
        }
        catch (Exception e) { Console.WriteLine(e.Message + "  bugged"); }
    }

    public async Task ReceiveOffer(string offerFrom, string offerString)
    {
        Console.WriteLine("ReceiveOffer");
        reconnecting = false;
        try
        {
            var offerToReceive = JsonConvert.DeserializeObject<SessionDescription>(offerString);
            var ans = await JSRuntime.InvokeAsync<SessionDescription>("handleRemoteOffer", offerToReceive);
            string answerString = JsonConvert.SerializeObject(ans);
            Console.WriteLine($"o tu jest nowe {targetConnectionId} od to :    " + answerString);
            try
            {
                await hubConnection.SendAsync("ToPeerAndConnect", targetConnectionId, answerString);
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                return;
            }
        }catch(Exception e){ 
            Console.WriteLine(e.Message);
        }
    }

    public async Task ReceiveOfferAndConnect(string offerFrom, string offerString)
    {
        reconnecting = false;
        Console.WriteLine($"ReceiveOfferAndConnect from {offerFrom} myid: {userConnectionId}");
        try
        {
            var offerToReceive = JsonConvert.DeserializeObject<SessionDescription>(offerString);
            await JSRuntime.InvokeAsync<SessionDescription>("handleRemoteOfferAndConnect", offerToReceive);

        }
        catch (Exception e) { Console.WriteLine(e.Message); }
    }

    [JSInvokable]
    public static void CSendIceCandidate(System.Text.Json.JsonElement candidate)
    {
        //var qua = ()candidate;
        var xxditate = JsonConvert.SerializeObject(candidate);
        hubConnection.SendAsync("SendIceCandidate", targetConnectionId, candidate.GetRawText());
    }

    public async void CReceiveIceCandidate(string candidateString)
    {
        Console.WriteLine("CReceiveIceCandidate" + candidateString);
        //var xxditate = JsonConvert.DeserializeObject(candidate);
        await JSRuntime.InvokeVoidAsync("receiveIceCandidate", candidateString);

    }

    //  if (webrtcJs is null)
    //     {
    //         webrtcJs = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/webrtc.js");
    // }
   // private async Task CloseWebRTC()
  //  {
    //    await JSRuntime.InvokeVoidAsync("closePeerConnection");
   // }

    [JSInvokable]
    public static async Task StartReconnecting()
    {
        reconnecting = true;
        Console.WriteLine("StartReconnecting");
        for(int i = 0;i<1000 && reconnecting;i++)
        {
            await SendOffer();
            Thread.Sleep(i*1000);
        }
    }

    private async static Task SendMessage()
    {
        await js.InvokeVoidAsync("sendChat", chatInput);
        chatHistory += $"You: {chatInput}\n";
        chatInput = "";
    }

    const string DisconnectCommandString = "!disconnect";
    [JSInvokable]
    public async static Task GotMessage(string mess)
    {
        if (mess == DisconnectCommandString)
        {
            Console.WriteLine("you got disconnected");
            targetConnectionId = null;
            await Skip();
        }
        chatHistory += $"wirdo: {mess}\n";//TODO btw it's not updating but works
    }
    private Tuple<int, int> initialValue = new Tuple<int, int>(18, 60);//todoremove

    @using Microsoft.AspNetCore.Components
    @inject IJSRuntime JSRuntime
    private ElementReference localVideo;

   

    private void OnSliderValueChanged(Tuple<int, int> values)
    {
        //ageMin = values.Item1;
        //ageMax = values.Item2;
        //Console.WriteLine($"Min Age: {ageMin}, Max Age: {ageMax}");
        filters.MinAge = values.Item1;
        filters.MaxAge = values.Item2;
        changedFilters = true;
    }
}

