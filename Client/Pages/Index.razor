@page "/"
@using CBC.Server;
@using CBC.Shared;
@using Microsoft.AspNetCore.Components.Web
@using Newtonsoft.Json;

<PageTitle>CBC</PageTitle>

<div class="app-container">
    <div class="video-container">
        <div class="stranger-video-container">
            <video id="localVideo" autoplay muted playsinline @ref="localVideo"></video>
            <div class="stranger-controls">
                <button @onclick="Skip" class="skip-button">@SkipText</button>
                <button @onclick="Pause" class="pause-button">Pause</button>
                <button @onclick="ReeportCurrent" class="report-button">Report</button>
                <button @onclick="ToggleBanel" class="report-button">Banel</button>
                <button @onclick="TogglePanel" class="panel-button">Filters</button>
            </div>
        <div class="canvas-container" id="recent-matches">
            </div>
        </div>
        <div class="local-video-container">
            <video id="remoteVideo" autoplay playsinline></video>
            <div class="chat-container">
                <textarea id="chatHistory" @bind="chatHistory" class="chat-history" readonly></textarea>
                <div class="send-container">
                    <textarea @bind="chatInput" class="chat-input" placeholder="Type your message..."></textarea>
                    <button @onclick="SendMessage" class="send-button">Send</button>
                </div>
            </div>
        </div>
    </div>
</div>


<div class="panel-wrapper">
    <div class="panel@(panelOpen?"-open":"")">
        <div class="checkboxes-container in-panel">
            <div>
                <img src="images/male-icon.png" alt="Male" class="gender-icon" />
                <input type="checkbox" @bind="acceptMale" />
            </div>
            <div>
                <img src="images/female-icon.png" alt="Female" class="gender-icon" />
                <input type="checkbox" @bind="acceptFemale" />
            </div>
        </div>
        <div class="slider-container in-panel">
            Age: @filters.MinAge - @filters.MaxAge
            <RangeSlider Min="18" Max="60" ValueChanged="@((values) => OnSliderValueChanged(values))" />
        </div>
    </div>
    <div class="banel@(banelOpen?"-open":"")">
        <div class="in-panel">
            Noone likes you !!!
        </div>
    </div>
</div>

<style>
    html, body {
        height: 100%;
        margin: 0;
        overflow:hidden;
    }

    .app-container {
        display: flex;
        justify-content: center;
        align-items: stretch;
        height: 100%;
    }

    .canvas-container {
        display: flex;
        overflow-x:scroll;
        overflow-y:hidden;
        height: 24vh;
        margin-left: -10vw;
    }

    .video-container {
        display: flex;
    }

    .canvas-container > * {
        position:absolute;
        margin: 0.75vh 0.0325vw;
    }

    .stranger-video-container, .local-video-container {
        flex-direction: column;
        align-content:center;
        width: 45vw;
    }

    video {
        width:45vw;
        height: 68.5vh;
        border: 1px solid #ccc;
        align-content: center;
    }

    .canvas-cointainer{
        background-color:yellow;
    }

    .chat-container {
        display: flex;
        flex-direction: column;
        height: 30vh;
    }

    .chat-history {
        background-color: rgba(255, 255, 255, 0.2); 
        color: #000; 
        height: 100%;
        resize: none;
        margin-bottom: 10px;
        overflow-y: scroll;
    }

    .chat-input {
        background-color: rgba(255, 255, 255, 0.2);
        color: #000;
        flex-grow: 1;
        resize: none;
    }

    .panel-wrapper {
        width: 100%;
        height: 10px;
        position: absolute;
        align-items: center;
        justify-content: center;
    }

    .panel, .banel {
        visibility: hidden;
        transform: translateX(32vw);
        width: 36vw;
        position: absolute;
    }

    .panel-open, .banel-open {
        display: block;
        visibility: visible;
        position: absolute;
        background-color: rgba(24, 31, 160, 1);
        transition: transform 0.5s ease-in-out;
        transform: translateY(-30vh) translateY(-40vh) translateX(32vw);
        justify-content: end;
        align-items: self-start;
        width: 36vw;
    }

    .banel-open {
        height: 35vh;
    }

    .in-panel > * {
        margin: 10vh 10vw;
        color: white;
    }

    .send-container {
        display: flex;
        gap: 10px;
    }

    .skip-button, .report-button, .panel-button, .pause-button, .send-button, .update-button {
        background-color: #007bff;
        border-color: #007bff;
        color: white;
        cursor: pointer;
        justify-content: center;
        align-items: center;
        display: flex;
        flex: 1;
    }

    .skip-button, .report-button, .panel-button, .pause-button, .update-button {
        cursor: pointer;
        flex-grow: 1;
        height: 6vh;
        flex-shrink: 1;
    }

    .stranger-controls {
        display: flex;
        flex-direction: row;
        align-items: center;
        gap: 0.75vw;
        padding: 0px 0.75vh;
        height: 6vh;
    }

    .noUi-horizontal {
        width: 100%;
        block-size:auto;
    }

    .gender-icon {
        width: 24px;
        height: 24px;
        margin-right: 5px;
    }
    
    .noUi-handle {
        width: 16px;
        height: 16px;
        border-radius: 50%;
        box-shadow: none;
        background: #3db9d3;
        cursor: pointer;
    }

    .slider-container {
        flex-grow: 1;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
    }

    .checkboxes-container {
        display: flex;
        flex-direction:row;
        justify-content: center;
        align-items: center;
    }

    .checkboxes-container div {
        display: flex;
        align-items: center;
        margin-bottom: 5px;
    }

    </style>

@code {
    public static string SkipText { get; set; } = $"Skip ({MyAge} {Femalish})";
    private static void updateSkipText()//it's for html update
    {
        string gender = Femalish > 0.5 ? "female" : "male";
        SkipText = $"Skip ({(int)MyAge} {gender})";
    }
    private static bool panelOpen = false;
    private static bool banelOpen = false;
    public static bool PanelOpen 
    {
        set
        {
            if(value)
            {
                banelOpen = false;
                panelOpen = true;
                return;
            }
            panelOpen = false;
        } 
    }

    public static bool BanelOpen
    {
        set
        {
            if (value)
            {
                banelOpen = true;
                panelOpen = false;
                return;
            }
            panelOpen = true;
        }
    }

    private void ToggleBanel()
    {
        banelOpen = !banelOpen;
    }

    private void TogglePanel()
    {
        panelOpen = !panelOpen;
    }

    private static string? userConnectionId;
    private static string? targetConnectionId;
    private static bool isoffering;
    static bool inQueue = false;

    static bool reconnecting = false;

    static double MyAge = -1;
    static double Femalish = 0.5;

    static int MyLastAge = -1;
    static bool WasIWoman = false;

    static int detections = 0;
    static int FailedFaceDetctions = 0;

    private static string chatInput = "";
    static private string chatHistory = "";
    private bool acceptMale
    {
        get => filters.AcceptMale;
        set {
            changedFilters = true;
            filters.AcceptMale = value; 
        }
    }
    private bool acceptFemale
    {
        get => filters.AcceptFemale;
        set
        {
            changedFilters = true;
            filters.AcceptFemale = value;
        }
    }
    private ElementReference VideoElement;
    private ElementReference CanvasElement;
    private static IJSRuntime js { get; set; }
    static UserPreferences filters { get; set; } = new("");
    static bool changedFilters = false;
    private string? DetectionResult;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("enableLocalVideo", localVideo);
            await JSRuntime.InvokeVoidAsync("runFaceRecognitionInterloop");
            //await JSRuntime.InvokeVoidAsync("initializeFaceDetection");
        }
    }

    @using Microsoft.AspNetCore.SignalR.Client
    @inject NavigationManager NavigationManager

    @implements IDisposable
    private static HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/videoChatHub"), options =>
            {
                options.UseStatefulReconnect = true;
            })
        .Build();
        hubConnection.On<string, bool>("MatchFound", MatchFound);
        hubConnection.On<string, string>("ReceiveOffer", ReceiveOffer);
        hubConnection.On<string, string>("ReceiveOfferAndConnect", ReceiveOfferAndConnect);
        hubConnection.On<string>("CReceiveIceCandidate", CReceiveIceCandidate);
        hubConnection.On<string>("ReceiveCall", ReceiveCall);
        hubConnection.On<string>("ForceDisconnect", remoteDisconnect);
        hubConnection.On("BanMe", BanMe);

        await hubConnection.StartAsync();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        js = JSRuntime;
    }

    public void Dispose()
    {
        if (hubConnection is not null)
        {
           // hubConnection.DisposeAsync().GetAwaiter().GetResult();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private static async Task Pause()
    {
        if (targetConnectionId != null)
        {
            await js.InvokeVoidAsync("sendChat", DisconnectCommandString);
            await Disconnect();
        }
        if(inQueue){
            inQueue = false;
            await hubConnection.SendAsync("Dodge");
            Console.WriteLine("doged");
        }
    }

    public static async Task remoteDisconnect(string with)
    {
        if (with == targetConnectionId)
        {
            await Skip();
        }
    }

    private static async Task Disconnect()
    {
        string disconnecting = targetConnectionId;
        targetConnectionId = null;
        await js.InvokeVoidAsync("disconnectCall", disconnecting);
    }

    private static async Task Skip()
    {
        if (await CheckIsBanned())
        {
            BanelOpen = true;
            return;
        }
        else
        {
            BanelOpen = false;
        }
        panelOpen = false;
        if (targetConnectionId != null)
        {
            await js.InvokeVoidAsync("sendChat", DisconnectCommandString);
            await Disconnect();
        }
        string filtersString = "", userString = "";

        if(changedFilters)
        {
            filtersString = JsonConvert.SerializeObject(filters);
            changedFilters = false;
        }
        var emIFemale = Femalish > 0.5;
        if (MyAge != MyLastAge || emIFemale != WasIWoman)
        {
            userString = JsonConvert.SerializeObject(new QueueUser() { Age = (int)MyAge, IsFemale = emIFemale });
        }
        await hubConnection.SendAsync("Skip", filtersString, userString);
        inQueue = true;
    }

    private static async Task ReeportCurrent()
    {
        await Reeport(targetConnectionId);
    }

    private static async Task<bool> CheckIsBanned()
    {
        var until = await Banning.GetBanEndDate(js);
        Console.WriteLine(until);
        if(until is null){ return false; }
        if(until > DateTime.Now)
        {
            return true;
        }
        return false;
    }

    public async static Task MatchFound(string connectTo, bool offering)
    {
        isoffering = offering;
        targetConnectionId = connectTo;
        try{
            await js.InvokeVoidAsync("getLocalStream");
            await js.InvokeVoidAsync("createPeerConnection");
        }catch (Exception e) { Console.WriteLine(e.Message + " bugged");}
        if (isoffering)
        {
            await SendOffer();
            //connectingState = ConnectingState.WaitingForAnswer;
        }
        else
        {
            //connectingState = ConnectingState.WaitingForOffer;
            await hubConnection.SendAsync("MarkAsRemoved");
        }
    }

    private static async Task SendOffer()
    {
        try
        {
            await js.InvokeVoidAsync("createOffer");
            var offer = await js.InvokeAsync<SessionDescription>("offerfn");
            string offerString = JsonConvert.SerializeObject(offer);
            //Console.WriteLine("pocreateoffer " + offerString);

            //var serializedOffer = JsonConvert.SerializeObject(offer);
            //offer = offer.Substring(1, offer.Length-2);
            //  Console.WriteLine($"Serialized is    {serializedOffer}");
            await hubConnection.SendAsync("ToPeer", targetConnectionId, offerString);
            Console.WriteLine("sent offer");
        }
        catch (Exception e) { Console.WriteLine(e.Message + "  bugged"); }
    }

    public async Task ReceiveOffer(string offerFrom, string offerString)
    {
        reconnecting = false;
        if (offerFrom == targetConnectionId)
        {
            try
            {
                var offerToReceive = JsonConvert.DeserializeObject<SessionDescription>(offerString);
                var ans = await JSRuntime.InvokeAsync<SessionDescription>("handleRemoteOffer", offerToReceive);
                string answerString = JsonConvert.SerializeObject(ans);
                try
                {
                    await hubConnection.SendAsync("ToPeerAndConnect", targetConnectionId, answerString);
                    Console.WriteLine("ReceiveOffer i wszet");

                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                    return;
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }
        }
    }

    public async Task ReceiveOfferAndConnect(string offerFrom, string offerString)
    {
        reconnecting = false;
        if(offerFrom == targetConnectionId){
            try
            {
                var offerToReceive = JsonConvert.DeserializeObject<SessionDescription>(offerString);
                await JSRuntime.InvokeAsync<SessionDescription>("handleRemoteOfferAndConnect", offerToReceive);
                Console.WriteLine("ReceiveOfferandconnect i wszet");

            }
            catch (Exception e) { Console.WriteLine(e.Message); }
        }
    }

    [JSInvokable]
    public static void CSendIceCandidate(System.Text.Json.JsonElement candidate)
    {
        //var qua = ()candidate;
        var xxditate = JsonConvert.SerializeObject(candidate);
        hubConnection.SendAsync("SendIceCandidate", targetConnectionId, candidate.GetRawText());
    }

    public async void CReceiveIceCandidate(string candidateString)
    {
        //Console.WriteLine("CReceiveIceCandidate" + candidateString);
        //var xxditate = JsonConvert.DeserializeObject(candidate);
        await JSRuntime.InvokeVoidAsync("receiveIceCandidate", candidateString);
    }

    //  if (webrtcJs is null)
    //     {
    //         webrtcJs = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/webrtc.js");
    // }
    // private async Task CloseWebRTC()
    // {
    //    await JSRuntime.InvokeVoidAsync("closePeerConnection");
    // }

    [JSInvokable]
    public static async Task StartReconnecting()
    {
        reconnecting = true;
        for(int i = 0;i<1000 && reconnecting;i++)
        {
            await SendOffer();
            Thread.Sleep(i*1000);
        }
    }

    private async static Task SendMessage()
    {
        await js.InvokeVoidAsync("sendChat", chatInput);
        chatHistory += $"You: {chatInput}\n";
        chatInput = "";
    }

    const string DisconnectCommandString = "!disconnect";
    [JSInvokable]
    public async static Task GotMessage(string mess)
    {
        if (mess == DisconnectCommandString)
        {
            if (targetConnectionId != null)
            {
                await Disconnect();
            }
            await Skip();
        }
        chatHistory += $"wirdo: {mess}\n";//TODO btw it's not updating but works
    }

    
    [JSInvokable]
    public async static Task Call(string Id)
    {
        await Pause();
        await MatchFound(Id, !true);            
        await hubConnection.SendAsync("CallUser", Id);
    }

    [JSInvokable]
    public async static Task AcceptCall(string Id)
    {
        await Pause();
        await MatchFound(Id, !false);
    }

    [JSInvokable]
    public async static Task Dislike(string Id)
    {
        await hubConnection.SendAsync("Dislike", Id);
    }

    [JSInvokable]
    public async static Task DenyCall(string Id)
    {
        await hubConnection.SendAsync("DenyCall", Id);
    }

    [JSInvokable]
    public async static Task FaceDetected(double newAge, double femalish)
    {
        int old = (int)MyAge;
        if (++detections > 5)
        {
            MyAge *= 0.8;
            MyAge =+ newAge * 0.2;
        }
        Femalish = femalish;
        MyAge = newAge;
        FailedFaceDetctions = 0;
        updateSkipText();
    }

    [JSInvokable]
    public static void FailFaceDetection()
    {
        if(++FailedFaceDetctions > 5)
        {
            MyAge = -1;
            detections = 0;
        }
    }

    [JSInvokable]
    private static async Task ReeportById(string ReeportedId)
    {
        await Reeport(ReeportedId);
    }
    
    private async static Task ReceiveCall(string callerId)
    {
        Console.WriteLine(callerId + " dzwoni");
        await js.InvokeVoidAsync("Calling", callerId);
    }

    private async static Task CallDenied(string callerId)
    {
        await js.InvokeVoidAsync("CallDenied", callerId);
    }

    private static async Task Reeport(string? ReeportedId)
    {
        try
        {
            await hubConnection.SendAsync("Reeport", ReeportedId);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    private Tuple<int, int> initialValue = new Tuple<int, int>(18, 60);//todoremove

    @using Microsoft.AspNetCore.Components
    @inject IJSRuntime JSRuntime
    private ElementReference localVideo;

    private void OnSliderValueChanged(Tuple<int, int> values)
    {
        //ageMin = values.Item1;
        //ageMax = values.Item2;
        //Console.WriteLine($"Min Age: {ageMin}, Max Age: {ageMax}");
        filters.MinAge = values.Item1;
        filters.MaxAge = values.Item2;
        changedFilters = true;
    }

    public async void BanMe()
    {
        Console.WriteLine("banningme");
        await Banning.SetBanEndDate(js, DateTime.Now.AddDays(14));
    }

}

